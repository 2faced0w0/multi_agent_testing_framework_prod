global:
  resolve_timeout: 5m
  # Optional SMTP config (override in deployment via secret-mounted file or env)
  smtp_smarthost: 'localhost:25'
  smtp_from: 'alerts@example.com'

route:
  receiver: 'default'
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 10s
  group_interval: 2m
  repeat_interval: 2h
  routes:
    - matchers:
        - severity="critical"
      receiver: 'critical-alerts'
      continue: false
    - matchers:
        - severity="warning"
      receiver: 'warning-alerts'
      continue: false

receivers:
  - name: 'default'
    # Fallback: log/webhook
    webhook_configs:
      - url: 'http://127.0.0.1:12345/'
        send_resolved: true

  - name: 'critical-alerts'
    email_configs:
      - to: 'ops-team@example.com'
        send_resolved: true
        require_tls: false
    slack_configs:
      - channel: '#critical-alerts'
        send_resolved: true
        title: 'CRITICAL: {{ .CommonAnnotations.summary }}'
        text: '{{ range .Alerts }}• {{ .Annotations.description }}{{ "\n" }}{{ end }}'
        api_url_file: '/etc/alertmanager/slack_api_url'  # mount a secret file with the webhook URL

  - name: 'warning-alerts'
    slack_configs:
      - channel: '#alerts'
        send_resolved: true
        title: 'Warning: {{ .CommonAnnotations.summary }}'
        text: '{{ range .Alerts }}• {{ .Annotations.description }}{{ "\n" }}{{ end }}'
        api_url_file: '/etc/alertmanager/slack_api_url'  # mount a secret file with the webhook URL

inhibit_rules:
  - source_matchers: [ 'severity="critical"' ]
    target_matchers: [ 'severity="warning"' ]
    equal: ['alertname', 'service']